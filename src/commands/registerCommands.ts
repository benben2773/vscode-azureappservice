/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { commands, TextDocument, workspace } from "vscode";
import { AppSettingTreeItem, FileTreeItem, registerSiteCommand } from "vscode-azureappservice";
import { AzureTreeItem, IActionContext, openInPortal as uiOpenInPortal, registerCommand, registerEvent } from "vscode-azureextensionui";
import { DeploymentSlotsNATreeItem, ScaleUpTreeItem } from "../explorer/DeploymentSlotsTreeItem";
import { ext } from "../extensionVariables";
import { addAppSetting } from "./appSettings/addAppSetting";
import { deleteAppSetting } from "./appSettings/deleteAppSettings";
import { downloadAppSettings } from "./appSettings/downloadAppSettings";
import { editAppSetting } from "./appSettings/editAppSetting";
import { renameAppSetting } from "./appSettings/renameAppSetting";
import { toggleSlotSetting } from "./appSettings/toggleSlotSetting";
import { uploadAppSettings } from "./appSettings/uploadAppSettings";
import { browseWebsite } from "./browseWebsite";
import { addCosmosDBConnection } from "./connections/addCosmosDBConnection";
import { removeCosmosDBConnection } from "./connections/removeCosmosDBConnection";
import { revealConnection } from "./connections/revealConnection";
import { revealConnectionInAppSettings } from "./connections/revealConnectionInAppSettings";
import { createSlot } from "./createSlot";
import { createTrialApp } from "./createTrialApp/createTrialApp";
import { createWebApp, createWebAppAdvanced } from "./createWebApp/createWebApp";
import { deleteTrialApp } from "./deleteTrialApp";
import { deleteWebApp } from "./deleteWebApp";
import { deploy } from "./deploy/deploy";
import { deploySlot } from "./deploy/deploySlot";
import { connectToGitHub } from "./deployments/connectToGitHub";
import { disconnectRepo } from "./deployments/disconnectRepo";
import { editScmType } from "./deployments/editScmType";
import { redeployDeployment } from "./deployments/redeployDeployment";
import { viewCommitInGitHub } from "./deployments/viewCommitInGitHub";
import { viewDeploymentLogs } from "./deployments/viewDeploymentLogs";
import { extendTrialApp } from "./extendTrialApp";
import { generateDeploymentScript } from "./generateDeploymentScript";
import { importTrialApp } from './importTrialApp';
import { installCosmosDBExtension } from "./installCosmosDBExtension";
import { enableFileLogging } from "./logstream/enableFileLogging";
import { startStreamingLogs } from "./logstream/startStreamingLogs";
import { stopStreamingLogs } from "./logstream/stopStreamingLogs";
import { openInPortal } from "./openInPortal";
import { startRemoteDebug } from "./remoteDebug/startRemoteDebug";
import { restartWebApp } from "./restartWebApp";
import { showFile } from "./showFile";
import { startSsh } from "./startSsh";
import { startWebApp } from "./startWebApp";
import { stopWebApp } from "./stopWebApp";
import { swapSlots } from "./swapSlots";

export function registerCommands(): void {

    commands.registerCommand('appService.ImportTrialApp', importTrialApp);
    registerCommand('appService.ExtendTrialApp', extendTrialApp);
    registerCommand('appService.CreateTrialApp', createTrialApp);
    registerCommand('appService.AddCosmosDBConnection', addCosmosDBConnection);
    registerCommand('appService.appSettings.Add', addAppSetting);
    registerCommand('appService.appSettings.Delete', deleteAppSetting);
    registerCommand('appService.appSettings.Download', downloadAppSettings);
    registerCommand('appService.appSettings.Edit', editAppSetting);
    registerCommand('appService.appSettings.Rename', renameAppSetting);
    registerCommand('appService.appSettings.ToggleSlotSetting', toggleSlotSetting);
    registerCommand('appService.appSettings.Upload', uploadAppSettings);
    registerCommand('appService.Browse', browseWebsite);
    registerCommand('appService.ConfigureDeploymentSource', editScmType);
    registerCommand('appService.connectToGitHub', connectToGitHub);
    registerCommand('appService.CreateSlot', createSlot);
    registerCommand('appService.CreateWebApp', createWebApp);
    registerCommand('appService.CreateWebAppAdvanced', createWebAppAdvanced);
    registerCommand('appService.Delete', deleteWebApp);
    registerCommand('appService.DeleteTrialApp', deleteTrialApp);
    registerCommand('appService.DeploymentScript', generateDeploymentScript);
    registerCommand('appService.DisconnectRepo', disconnectRepo);
    registerCommand('appService.EnableFileLogging', enableFileLogging);
    registerCommand('appService.InstallCosmosDBExtension', installCosmosDBExtension);
    registerCommand('appService.LoadMore', async (actionContext: IActionContext, node: AzureTreeItem) => await ext.tree.loadMore(node, actionContext));
    registerCommand('appService.openFile', async (_context: IActionContext, node: FileTreeItem) => { await showFile(node, ext.fileEditor); }, 500);
    registerCommand('appService.OpenInPortal', openInPortal);
    registerCommand('appService.Refresh', async (_actionContext: IActionContext, node?: AzureTreeItem) => await ext.tree.refresh(node));
    registerCommand('appService.RemoveCosmosDBConnection', removeCosmosDBConnection);
    registerCommand('appService.Restart', restartWebApp);
    registerCommand('appService.RevealConnection', revealConnection);
    registerCommand('appService.RevealConnectionInAppSettings', revealConnectionInAppSettings);
    registerCommand('appService.ScaleUp', async (_context: IActionContext, node: DeploymentSlotsNATreeItem | ScaleUpTreeItem) => await uiOpenInPortal(node.root, node.scaleUpId));
    registerCommand('appService.selectSubscriptions', () => commands.executeCommand("azure-account.selectSubscriptions"));
    registerCommand('appService.showOutputChannel', () => { ext.outputChannel.show(); });
    registerCommand('appService.Start', startWebApp);
    registerCommand('appService.StartRemoteDebug', startRemoteDebug);
    registerCommand('appService.StartSsh', startSsh);
    registerCommand('appService.startStreamingLogs', startStreamingLogs);
    registerCommand('appService.Stop', stopWebApp);
    registerCommand('appService.StopLogStream', stopStreamingLogs);
    registerCommand('appService.SwapSlots', swapSlots);
    registerCommand('appService.toggleAppSettingVisibility', async (_actionContext: IActionContext, node: AppSettingTreeItem) => { await node.toggleValueVisibility(); }, 250);
    registerCommand('appService.ViewCommitInGitHub', viewCommitInGitHub);
    registerEvent('appService.fileEditor.onDidSaveTextDocument', workspace.onDidSaveTextDocument, async (actionContext: IActionContext, doc: TextDocument) => { await ext.fileEditor.onDidSaveTextDocument(actionContext, ext.context.globalState, doc); });
    registerSiteCommand('appService.Deploy', deploy);
    registerSiteCommand('appService.DeploySlot', deploySlot);
    registerSiteCommand('appService.Redeploy', redeployDeployment);
    registerSiteCommand('appService.viewDeploymentLogs', viewDeploymentLogs);
}
